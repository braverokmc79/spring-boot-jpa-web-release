
## *********** yaml 전환 주소
#Yaml to properties / Properties to Yaml converter
#http://mageddo.com/tools/yaml-converter


#-- 유저이름@아이피주소
#create user 'springbootblog'@'%' identified by '1234';
#-- ON DB이름.테이블명
#-- TO 유저이름@아이피주소
#GRANT ALL springbootblog ON *.* TO 'springbootblog'@'%';
#CREATE DATABASE springbootblog CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;
#use blog;


#애플리케이션 포트 설정
server.port=8080


######################################################
#로그 레벨 설정
logging.level.root= info

#로그 파일 서정
#logging.file.name= springBoot.log
######################################################

######################################################
#jsp servlet 으로 개발시 아래 추가
#server.servlet.context-path= /blog
server.servlet.encoding.charset= UTF-8
server.servlet.encoding.enabled=true
server.servlet.encoding.force= true
######################################################
######################################################
######################################################


############## JSP 사용시 추가 ############## ##############
###jsp 사용시 pom.xml 에서 spring-boot-starter-thymeleaf\
###라이브러리를 주석처리 해야 한다.
####################################
spring.mvc.view.prefix: /WEB-INF/views/
spring.mvc.view.suffix: .jsp
############## ############## ############## ##############
############## ############## ############## ##############


#MySQL 연결설정
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
#spring.datasource.url=jdbc:mysql://localhost:3306/jpashop?serverTimezone=UTC
#spring.datasource.username=jpashop
#spring.datasource.password=12341234


spring.datasource.driver-class-name=net.sf.log4jdbc.sql.jdbcapi.DriverSpy
spring.datasource.url=jdbc:log4jdbc:mysql://localhost:3306/sbootgodcoder?serverTimezone=Asia/Seoul
spring.datasource.username=sbootgodcoder
spring.datasource.password=1111


####################################################################################
############################## auto build ############################################
####################################################################################
#Springboot auto build
spring.devtools.livereload.enabled=true
spring.devtools.restart.enabled=true

#Thymeleaf cache 사용 중지
spring.thymeleaf.cache =false


####################################################################################
####################################################################################
####################################################################################

####################################################################################
############################## jpa 옵션  ############################################
####################################################################################
#실행되는 쿼리 콘솔 출력
spring.jpa.properties.hibernate.show_sql=true

#콘솔창에 출력되는 쿼리를 가독성이 좋게 포맷팅
spring.jpa.properties.hibernate.format_sql=true
#logging.level.org.hibernate.SQL=DEBUG
#logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE


#쿼리에 물음표로 출력되는 바인드 파라미터 출력
logging.level.org.hibernate.type.descriptor.sql= trace

#추가적인 주석을 표시하기
spring.jpa.properties.hibernate.use_sql_comments=true


#none: 아무것도 실행하지 않는다 (대부분의 DB에서 기본값이다)
#create-drop: SessionFactory가 시작될 때 drop및 생성을 실행하고, SessionFactory가 종료될 때 drop을 실행한다 (in-memory DB의 경우 기본값이다)
#create: SessionFactory가 시작될 때 데이터베이스 drop을 실행하고 생성된 DDL을 실행한다
#update: 변경된 스키마를 적용한다
#validate: 변경된 스키마가 있다면 변경점을 출력하고 애플리케이션을 종료한다
spring.jpa.hibernate.ddl-auto= update

# MySQL 상세 지정
#SQL 은 표준 SQL과 DBMS 벤더에서 제공하는 SQL 이 존재합니다. 각 공급업체에서 만든 SQL 을 방언(Dialect)이라고
#생각하면 됩니다. 우리가 사용하는 데이터베이스는 MySQL 이어서 JPA 에 MySQL8Dialect 를 사용하라고 알려줍니다.
#만약, 데이터베이스를 오라클 교체하더라도, 오라클릐 Dialectf를 설정해준다면 문제없이 애플리케이션을 구동할 수 있습니다.
spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect


#기본 batch size 설정
spring.jpa.properties.hibernate.default_batch_fetch_size=1000

#영속성을 프리젠테이션 계층까지 가져간다. 트랜잭션은 Service 계층에서 종료된다. Transaction 이 종료된 후에도 Controller 의 Session 이 close 되지 않았기 때문에,
#영속 객체는 Persistence 상태를 유지할 수 있으며, 따라서 프록시 객체에 대한 Lazy Loading 을 수행할 수 있게 된다.
#버전 2.0 부터는 스프링부트는 기본적으로 OSIV 가 활성화되었을 때 경고를 발행하므로 프로덕션 시스템에 영향을 주기 전에는 이 문제를 발견할 수 있다.
#Spring Boot JPA 의존성을 주입 받아 어플리케이션을 구성할 경우 spring.jpa.open-in-view의 기본값인 true로 지정되어 있어 OSIV가 적용된 상태로 어플리케이션이 구성된다.
#true 일경우 layze 로딩이 가능하다. 영속성을 프리젠테이션(컨트롤) 계층까지 가져가기 때문이다.
#spring.jpa.open-in-view : true 기본값
spring.jpa.open-in-view= true

#spring.jpa.hibernate.naming.physical-strategy 전략 변경
#JPA를 적용하고 나서 Entity(=VO) 생성 시 변수 명을 그대로 매핑 안하고 카멜을(UserName = user_name)
#언더바 형식으로 자동 매핑해준다. 가끔 이 부분이 불편해서 변수 명과 DB칼럼명을 그대로 매핑 하게 하려면
#application.properties 에 추가해준다.
#다음과 같이 설정을 하면 테이블 컬럼이 카멜표기법을 성정된다.
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

#
#□ JPA 기본키(Primary Key) 자동 생성 전략
#- AUTO(default)
#. JPA 구현체가 자동으로 생성 전략을 결정한다.
#- IDENTITY
#. 기본키 생성을 데이터베이스에게 위임한다.
#. MySQL의 경우 AUTO_INCREMENT를 사용하여 기본키를 생성한다.
#- SEQUENCE
#. 데이터베이스의 특별한 오브젝트 시퀀스를 사용하여 기본키를 생성한다.
#- TABLE
#. 데이터베이스에 키 생성 전용 테이블을 만들고 이를 사용하여 기본키를 생성한다.
#- spring boot 1.5 버전
#. use-new-id-generator-mappings의 default 값이 false 이다.
#. 기본키 생성 전략이 AUTO인 경우 IDENTITY를 따라간다.
#- spring boot 2.0 버전 이상
#. use-new-id-generator-mappings의 default 값이 true 이다.
#. 기본키 생성 전략이 AUTO인 경우 TABLE 전략을 따라간다.
# 다음과 같이 스프링부트 2.0 이상에서 false 설정할 경우 IDENTITY 는  MySQL의 경우 AUTO_INCREMENT를 사용하여 기본키를 생성
# true 일경우 hibernate_sequence 테이블 생성되며 여기에서 키값을 생성한다.
spring.jpa.hibernate.use-new-id-generator-mappings=false



####################################################################################
####################################################################################
####################################################################################


####################################################################################
################ 롬북 data 페이징 처리 옵션 #####################################################
####################################################################################
# 기본 페이지e.
spring.data.web.pageable.default-page-size=20

#허용되는 최대 페이지 크기.
spring.data.web.pageable.max-page-size=2000

# 1부터 시작하는 페이지 번호 인덱스 노출 및 가정 여부.
#spring.data.web.pageable.one-indexed-parameters=false
spring.data.web.pageable.one-indexed-parameters=true

#페이지 인덱스 매개변수 이름.
spring.data.web.pageable.page-parameter=page

# 페이지 번호 및 페이지 크기 매개변수 앞에 추가할 일반 접두어.
spring.data.web.pageable.prefix=

# 한정자와 실제 페이지 번호 및 크기 속성 사이에 사용할 구분 기호
spring.data.web.pageable.qualifier-delimiter=_

# 페이지 크기 매개변수 이름.
spring.data.web.pageable.size-parameter=size

# 매개변수 이름 정렬.
spring.data.web.sort.sort-parameter=sort

####################################################################################
####################################################################################
####################################################################################





####################################################################################
###########################파일 업로드 설정###############################
####################################################################################

#파일 한 개당 최대 사이즈
spring.servlet.multipart.maxFileSize=20MB

#요청당 최대 파일 크기
spring.servlet.multipart.maxRequestSize=100MB

#상품 이미지 업로드 경로
itemImgLocation=E:/IntelliJ IDEA/upload/item

#리소스 업로드 경로
uploadPath=file:///E:/IntelliJ IDEA/upload/

####################################################################################
####################################################################################
####################################################################################



#칙칙한 스프링 콘솔 창에 색을 입혀보자
spring.output.ansi.enabled=always

#IntelliJ IDEA 출력시 로그 링크를 클릭하면 소스로 이동하게 한다.
logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss.SSS} %magenta([%thread]) %highlight(%-5level) %msg - at %C.%M\\(%F:%L\\)%n



####################################################################################
####################################################################################
#########################에러페이지 설정###########################################
#오류 응답에 exception의 내용을 포함할지 여부,기본적으로 발생하게 된 에러 내용을 모두 포함
server.error.include-exception= true

#오류 응답에 stacktrace 내용을 포함할지 여부 (ALWAYS, NEVER, ON_TRACE_PARAM)
#stacktrace는 오류가 발생하게 된 과정에 대한 로그를 의미
server.error.include-stacktrace=ALWAYS

#브라우저 요청에 대해 서버 오류시 기본으로 노출할 페이지를 사용할지 여부, 스프링부트에서 제공하는 기본 에러 페이지를 사용할 것인지에 대한 설정
#server.error.whitelabel.enabled 속성을 false 로 설정하여 화이트 라벨 오류 페이지를 완전히 비활성화
server.error.whitelabel.enabled= false
#이 항목을 application.properties 파일에 추가하면 오류 페이지가 비활성화되고 기본 애플리케이션 컨테이너(예: Tomcat)에서 시작된 간결한 페이지가 표시됩니다.
#########################에러페이지 설정###########################################
####################################################################################
####################################################################################



cos.key =cos1234







